---
title: "Simulation Analysis"
author: "Tzu-Yao Lin"
date: last-modified
bibliography: references.bib
csl: apa.csl
execute:
  warning: false
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    self-contained: true
    code-fold: show
    code-tools: true
---

# Simulated data

## Multilevel Measurement Error Vector Autoregressive (1) Model

According to @schuurman2019, the **multilevel MEVAR(1) model** can be written as follows.

-   Level 1 model (within subject)
    -   Observation equation

$$
\begin{pmatrix}y_{1it} \\ y_{2it}\end{pmatrix} = \begin{pmatrix}\mu_{1i} \\ \mu_{2i}\end{pmatrix} + \begin{pmatrix}\theta_{1it} \\ \theta_{2it}\end{pmatrix} + \begin{pmatrix}\epsilon_{1it} \\ \epsilon_{2it}\end{pmatrix}
$$

$$
\begin{pmatrix}\epsilon_{1it} \\ \epsilon_{2it}\end{pmatrix} \sim \mathcal{N} \left(\begin{pmatrix}0 \\ 0\end{pmatrix}, \mathbf{\Sigma}_{\epsilon i} = \begin{pmatrix} \sigma^2_{\epsilon 11i} & \sigma_{\epsilon 12i} \\ \sigma_{\epsilon 12i} & \sigma^2_{\epsilon 22i}\end{pmatrix}\right)
$$

-   State equation (state space model representation)

$$
\begin{pmatrix}\theta_{1it} \\ \theta_{2it}\end{pmatrix} = \begin{pmatrix} \phi_{11i} & \phi_{12i} \\ \phi_{12i} & \phi_{22i} \end{pmatrix} \begin{pmatrix}\theta_{1it-1} \\ \theta_{2it-1}\end{pmatrix} + \begin{pmatrix}\omega_{1it} \\ \omega_{2it}\end{pmatrix}
$$

$$
\begin{pmatrix}\omega_{1it} \\ \omega_{2it}\end{pmatrix} \sim \mathcal{N} \left(\begin{pmatrix}0 \\ 0\end{pmatrix}, \mathbf{\Sigma}_{\omega i}  = \begin{pmatrix} \sigma^2_{\omega 11i} & \sigma_{\omega 12i} \\ \sigma_{\omega 12i} & \sigma^2_{\omega 22i}\end{pmatrix}\right)
$$

-   Level 2 model (between subject)

$$
\boldsymbol{\mu}_i = \begin{pmatrix}\mu_{1 i} \\\mu_{2 i} \end{pmatrix} \sim \mathcal{N} \left(\boldsymbol{\gamma}_\mu = \begin{pmatrix} \gamma_{\mu 1} \\\gamma_{\mu 2} \end{pmatrix}, \boldsymbol{\Psi}_\mu =\begin{pmatrix} \psi_{\mu1}^2 & \psi_{\mu12} \\ \psi_{\mu12} & \psi_{\mu2}^2\end{pmatrix}\right)
$$

$$
vec(\boldsymbol{\Phi}_i) = \begin{pmatrix} \phi_{11i} \\ \phi_{12i} \\ \phi_{21i} \\ \phi_{22i} \end{pmatrix} \sim \mathcal{N} \left(\boldsymbol{\gamma}_{\Phi} = \begin{pmatrix}\gamma_{\phi 11} \\ \gamma_{\phi 12} \\ \gamma_{\phi 21} \\ \gamma_{\phi 22} \end{pmatrix}, \boldsymbol{\boldsymbol{\Psi}}_{\phi} = \begin{pmatrix} \psi_{\phi11}^2 & \psi_{\phi11\phi12} & \psi_{\phi11\phi21} & \psi_{\phi11\phi22} \\ \psi_{\phi11\phi12} & \psi_{\phi12}^2 & \psi_{\phi12\phi21} & \psi_{\phi12\phi22} \\ \psi_{\phi21\phi11} & \psi_{\phi21\phi12} & \psi_{\phi21}^2 & \psi_{\phi21\phi22} \\ \psi_{\phi11\phi22} & \psi_{\phi22\phi12} & \psi_{\phi22\phi21} & \psi_{\phi22}^2 \end{pmatrix} \right)
$$

$$
\begin{align*}
\mathbf{\Sigma}_{\epsilon i}  &= \begin{pmatrix} \sigma^2_{\epsilon 11i} & \sigma_{\epsilon 12i} \\ \sigma_{\epsilon 12i} & \sigma^2_{\epsilon 22i}\end{pmatrix} = \begin{pmatrix}\tau_{\epsilon 1i} \\ \tau_{\epsilon 2i} \end{pmatrix} \begin{pmatrix} 1 & \psi_{\sigma_{\epsilon 12i}} \\ \psi_{\sigma_{\epsilon 12i}} & 1\end{pmatrix}  \begin{pmatrix}\tau_{\epsilon 1i} \\ \tau_{\epsilon 2i} \end{pmatrix}^\top = \boldsymbol{\tau}_{\epsilon i} \mathbf{C}_{\epsilon i} \boldsymbol{\tau}_{\epsilon i}^\top \\
\boldsymbol{\tau}_{\epsilon i} &\sim logNormal\left(\boldsymbol{\gamma_{\epsilon}} = \begin{pmatrix}\gamma_{\epsilon 1} \\ \gamma_{\epsilon 2}\end{pmatrix}, \boldsymbol{\Phi_\epsilon} = \begin{pmatrix} \psi_{\epsilon 1}^2 & 0 \\ 0 & \psi_{\epsilon 2}^2\end{pmatrix}\right) \\
\mathbf{C}_{\epsilon i} &\sim LKJ(\eta_\epsilon) 
\end{align*}
$$

$$
\begin{align*}
\mathbf{\Sigma}_{\omega i}  &= \begin{pmatrix} \sigma^2_{\omega 11i} & \sigma_{\omega 12i} \\ \sigma_{\omega 12i} & \sigma^2_{\omega 22i}\end{pmatrix} = \begin{pmatrix}\tau_{\omega 1i} \\ \tau_{\omega 2i} \end{pmatrix} \begin{pmatrix} 1 & \psi_{\sigma_{\epsilon 12i}} \\ \psi_{\sigma_{\epsilon 12i}} & 1\end{pmatrix}  \begin{pmatrix}\tau_{\omega 1i} \\ \tau_{\omega 2i} \end{pmatrix}^\top = \boldsymbol{\tau}_{\omega i} \mathbf{C}_{\omega i} \boldsymbol{\tau}_{\omega i}^\top \\
\boldsymbol{\tau}_{\omega i} &\sim logNormal\left(\boldsymbol{\gamma_{\omega}} = \begin{pmatrix}\gamma_{\omega 1} \\ \gamma_{\omega 2}\end{pmatrix}, \boldsymbol{\Phi_\omega} = \begin{pmatrix} \psi_{\omega 1}^2 & 0 \\ 0 & \psi_{\omega 2}^2\end{pmatrix}\right) \\
\mathbf{C}_{\omega i} &\sim LKJ(\eta_\omega) 
\end{align*}
$$

## Reliability

-   **Reliability for systematic between-subject difference**

$$
R^B_p = \frac{\psi^2_{\mu p}}{Var(y_p)} = \frac{\psi^2_{\mu p}}{\psi^2_{\mu p} + E_{i}[\tau_{p i}]+ E[\sigma_{\epsilon pp i}^2]} 
$$

where $p = 1, 2$. Since $\tau_{\epsilon pi} \sim logNotmal(\tau_{\epsilon p}, \psi_{\epsilon p}^2)$, $\sigma_{\epsilon ppi}^2 = \tau_{\epsilon pi}^2 \sim \sim logNotmal(2\tau_{\epsilon p}, 4\psi_{\epsilon p}^2)$. Therefore, $E[\sigma_{\epsilon pp i}^2] = e^{2\tau_{\epsilon p} + 4\psi_{\epsilon p}^2 / 2}$

-   **Reliability for within-subject fluctuations**

$$
R_{pi}^W = \frac{\tau_{pi}}{Var(y_{i})} = \frac{\tau_{pi}}{\tau_{pi} + \sigma_{\epsilon ppi}^2}
$$

where $\tau_i = \frac{\sigma_{\omega i}^2}{1 - \phi_i^2}$.

## Data generating function and (hyper-)parameter settings

``` r
#| filename: "data_generation.R"

{{< include data_generation.R >}}
```

## Snoop the generated data

```{r}
#| label: load-package-and-generate-data

library(tidyverse)
theme_set(theme_bw())

# source("data_generation.R")
# gen_data <- generate_ssm_data(N = 25, nT = 50, seed = 1294)
# saveRDS(gen_data, "sim_data/data_N25T50S1294.rds")
gen_data <- readRDS("sim_data/data_N25T50S1294.rds")
```

```{r}
#| label: fig-ts-plot
#| fig-cap: "The time plot of observed scores for each subject"

plot_data <- tibble(y = gen_data$y) |> 
  mutate(Sub = factor(1:n()),
         y1 = map(y, ~ .x[1, ]), 
         y2 = map(y, ~ .x[2, ])) |> 
  unnest_longer(y1:y2) |> 
  pivot_longer(y1:y2, names_to = "Var", values_to = "Value") |> 
  mutate(Time = 1:n(), .by = c(Sub, Var))

plot_data |> 
  # filter(Sub %in% 1:12) |> 
  ggplot(aes(x = Time, y = Value, color = Var)) + 
  geom_line() + geom_point() +
  facet_wrap(Sub ~ ., scales = "free_y", nrow = 5)
```

```{r}
#| label: fig-ts-plot-all
#| fig-cap: "The time plot of observed scores for all subjects together"

plot_data |> 
  ggplot(aes(x = Time, y = Value, group = Sub, color = Sub)) +
  geom_line() + #geom_point() +
  facet_grid(. ~ Var) 
```

## Reliability

-   Between-level reliability

```{r}
#| label: rel-B

gen_data$rel_B
```

-   Within -level reliability

```{r}
#| label: fig-rel-W
#| fig-cap: "The distribution of within-subject reliability"

plot_rel_W <- tibble(rel_W = gen_data$rel_W) |> 
  mutate(Sub = factor(1:n()),
         rel_W_y1 = map_dbl(rel_W, ~ .x[1]), 
         rel_W_y2 = map_dbl(rel_W, ~ .x[2]), .keep = "none") |> 
  pivot_longer(rel_W_y1:rel_W_y2, names_to = "Var", values_to = "Value")

plot_rel_W |> 
  ggplot(aes(x = Value, color = Var, fill = Var)) +
  geom_histogram() +
  facet_grid(. ~ Var)
```

# Model fitting by Stan

First of all, I used the same model that generated the data to fit the data. The Stan code is as follows.

## Stan codes

``` {.cmdstan filename="multilevel_univariate_ssm_lkj.stan"}

{{< include stan/multilevel_univariate_ssm_lkj.stan >}}
```

### Fit the model

```{r}
#| label: load-packages-and-source-cunstom-function

library(cmdstanr)
register_knitr_engine(override = FALSE)
library(posterior)
library(bayesplot)
color_scheme_set("brewer-Spectral")

source("custom_functions.R")
pos_neg_color <- scales::hue_pal()(2)
```

```{r}
#| label: ssm-lkj-fit
#| eval: false

lkj <- cmdstan_model("stan/multilevel_multivariate_ssm_lkj.stan")

mssm_data <- lst(N = gen_data$N,
                 `T` = gen_data$nT,
                 y = gen_data$y)

output_dir <- "stan/results/ssm_lkj_N25T50_W4000S4000_S1294"
dir.create(output_dir)

lkj_fit <- lkj$sample(data = mssm_data, 
                        chains = 6, 
                        parallel_chains = 6, 
                        iter_warmup = 4000, 
                        iter_sampling = 4000, 
                        seed = 1294, 
                        refresh = 2000, 
                        show_messages = TRUE, 
                        output_dir = output_dir)
lkj_fit <- as_cmdstan_fit(list.files(output_dir, full.names = TRUE))
lkj_sum <- lkj_fit$summary()
saveRDS(lkj_sum, str_c(output_dir,"/summary.RDS"))
```

### Check the convergence

```{r}
#| label: ssm-lkj-sum

lkj_sum <- readRDS("stan/results/ssm_lkj_N25T50_W4000S4000_S1294/summary.RDS")
skimr::skim(lkj_sum |> select(rhat:ess_tail))
# View(lkj_sum)
```

## Change to another model

The following, I used the model used by @schuurman2019 to fit the data.

``` {.cmdstan filename="multilevel_multivariate_ssm_s2019.stan"}

{{< include stan/multilevel_multivariate_ssm_s2019.stan >}}
```


As for the setting of the covariance matrix of the measurement errors/innovations:


::: {#fig-schuurman2019-Mplus-setting layout-ncol=3}
![](figures/schuurman2019_Mplus_setting1.png)

![](figures/schuurman2019_Mplus_setting2.png)

![](figures/schuurman2019_Mplus_setting3.png)

Mplus setting for the covariance matrix of the measurement errors/innovations in @schuurman2019
:::




### Fit the model

```{r}
#| label: ssm-s2019-fit
#| eval: false

mssm <- cmdstan_model("stan/multilevel_multivariate_ssm_s2019.stan")

mssm_data <- lst(N = gen_data$N,
                 `T` = gen_data$nT,
                 y = gen_data$y)

output_dir <- "stan/results/ssm_s2019_N25T50_W4000S4000_S1295"
dir.create(output_dir)

mssm_fit <- mssm$sample(data = mssm_data, 
                        chains = 6, 
                        parallel_chains = 6, 
                        iter_warmup = 4000, 
                        iter_sampling = 4000, 
                        seed = 1295, 
                        refresh = 2000, 
                        show_messages = TRUE, 
                        output_dir = output_dir)

saveRDS(mssm_fit$summary(), str_c(output_dir,"/summary.RDS"))
```

### Check the convergence

```{r}
#| label: ssm-s2019-sum

output_dir <- "stan/results/ssm_s2019_N25T50_W4000S4000_S1295"
mssm_fit <- as_cmdstan_fit(list.files(output_dir, "*.csv", full.names = TRUE))
mssm_sum <- readRDS(str_c(output_dir,"/summary.RDS"))
skimr::skim(mssm_sum |> select(rhat:ess_tail))
# View(mssm_sum)
```
```{r}
mssm_fit$diagnostic_summary()
```

```{r}
#| label: ssm-s2019-trace

mssm_fit$draws(variables = "mu", format = "df") %>% 
  select(1:12, .chain, .iteration, .draw) %>% 
  mcmc_trace()
mssm_fit$draws(variables = "Phi", format = "df") %>% 
  select(kronecker(1:3, c(0, 25, 50, 75), "+"), 
         .chain, .iteration, .draw) %>%
  mcmc_trace()
mssm_fit$draws(variables = c("R"), format = "df") %>% 
  select(kronecker(c(5, 8, 11), c(0, 25, 50, 75), "+"), 
         .chain, .iteration, .draw) %>%
  mcmc_trace()
mssm_fit$draws(variables = c("Q"), format = "df") %>% 
  select(kronecker(c(15, 19, 23), c(0, 25, 50, 75), "+"), 
         .chain, .iteration, .draw) %>%
  mcmc_trace()
mssm_fit$draws(variables = "rel_W", format = "df") %>% 
  select(13:24, .chain, .iteration, .draw) %>% 
  mcmc_trace()
mssm_fit$draws(variables = "rel_B", format = "df") %>% 
  mcmc_trace()

```

### Results

```{r}
color_scheme_set("red")

ppc_intervals(y = gen_data$mu |> list_transpose() |> list_c(),
              yrep = mssm_fit$draws(variables = "mu", format = "draws_matrix"))
```

```{r}
ppc_intervals(y = gen_data$Phi |> list_transpose() |> list_c(),
              yrep = mssm_fit$draws(variables = "Phi", format = "draws_matrix"))

```

```{r}
ppc_intervals(y = gen_data$rel_W |> list_transpose() |> list_c(),
              yrep = mssm_fit$draws(variables = "rel_W", 
                                    format = "draws_matrix"))

```

```{r}
ppc_intervals(y = gen_data$rel_B,
              yrep = mssm_fit$draws(variables = "rel_B", 
                                    format = "draws_matrix"))
```

### Evaluation ... (Skip)

```{r}
#| label: overall-bias
#| include: false
#| eval: false

overall_bias <- function(true_value, mcmc_draws, estimate = c("mean", "median")) {
  estimate <- match.arg(estimate)
  
  if (estimate == "mean") {
    mean_draws <- colMeans(mcmc_draws)
  } else if (estimate == "median") {
    mean_draws <- apply(mcmc_draws, 2, median)
  }
  
  mean(mean_draws - true_value)
}

overall_bias(gen_data$rel_W |> list_c(),
             mssm_fit$draws(variables = "rel_W", format = "draws_matrix"))


y = gen_data$rel_W |> list_c()
y              
mssm_fit$draws(variables = "rel_W", format = "draws_matrix")

```

## Dynamic linear model

::: {#fig-ssm}
![Stan code](figures/ssm_stan_example_code){#fig-ssm-code}

![MCMC summary](figures/ssm_stan_example_summary){#fig-ssm-summary}

![Trace plots](figures/ssm_stan_example_traceplot){#fig-ssm-traceplot}

Deterioration of the convergence
:::

@hagiwara2021 proposes that sample only parameters using MCMC and then reproduce the state samples more efficient using *forward filtering backward sampling* (FFBS). As the name suggests, this method performs Kalman filtering once in the time forward direction and then draws a sample based on Kalman smoothing in the time reverse direction. It is sometimes referred to as simulation smoothing because it corresponds to a simulation version of Kalman smoothing.

> `Stan` prepares a function `gaussian_dlm_obs()` to calculate the likelihood of the linear Gaussian state-space model. This function was implemented as Dr. Jeffrey B. Arnold’s contribution and executes Kalman filtering internally. This function in the Stan 2.19.2 does not yet support time-varying models and missing observations.

> Note that the library `dlm` provides the function `dlmBSample()` to execute FFBS. This function calculates Kalman smoothing internally.

::: {#fig-dlm}
![Stan code](figures/dlm_stan_example_code){#fig-dlm-code}

![MCMC summary](figures/dlm_stan_example_summary){#fig-dlm-summary}

![Trace plots](figures/dlm_stan_example_traceplot){#fig-dlm-traceplot}

No state sampling with MCMC
:::

The code for Stan is as follows.

``` {.cmdstan filename="multilevel_univariate_dlm_lkj.stan"}

{{< include stan/multilevel_univariate_dlm_lkj.stan >}}
```

```{r}
#| label: dlm-lkj-fit
#| eval: false

dlm_lkj <- cmdstan_model("stan/multilevel_multivariate_dlm_lkj.stan")

mssm_data <- lst(N = gen_data$N,
                 `T` = gen_data$nT,
                 y = gen_data$y)

output_dir <- "stan/results/dlm_w1s1_s1294"
dir.create(output_dir)

dlm_lkj_fit <- dlm_lkj$sample(data = mssm_data, 
                        chains = 6, 
                        parallel_chains = 6, 
                        iter_warmup = 1000, 
                        iter_sampling = 1000, 
                        seed = 1294, 
                        refresh = 2000, 
                        show_messages = TRUE, 
                        output_dir = output_dir)

saveRDS(dlm_lkj_fit$summary(), str_c(output_dir,"/summary.RDS"))
```

```{r}
#| label: dlm-lkj-sum

output_dir <- "stan/results/dlm_w1s1_s1294"
dlm_lkj_fit <- as_cmdstan_fit(list.files(output_dir, "*.csv", full.names = TRUE))
dlm_lkj_sum <- readRDS(str_c(output_dir, "/summary.RDS"))
skimr::skim(dlm_lkj_sum |> select(rhat:ess_tail))
```

```{r}
#| label: dlm-lkj-trace

dlm_lkj_fit$draws(variables = c("Phi"), format = "df") %>% 
  select(kronecker(1:3, c(0, 25, 50, 75), "+"), 
         .chain, .iteration, .draw) %>%
  mcmc_trace()

dlm_lkj_fit$draws(variables = c("diag_Psi_tau_R", "diag_Psi_tau_Q"), format = "df") %>% 
  mcmc_trace()
```
